import { formatTimeDisplay } from './time-intervals.js';
import { getAgeGroupNames, getSkillNames, getStageNames, getTypeNames } from './localization.js';

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —É—Ä–æ–∫–∞ –≤ PDF —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –ø–µ—á–∞—Ç—å
 */
export function exportLessonToPDF(lessonData) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if (!lessonData) {
      throw new Error('–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    
    if (!lessonData.cards || lessonData.cards.length === 0) {
      throw new Error('–í —É—Ä–æ–∫–µ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤');
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è PDF
    const printContent = createPrintableContent(lessonData);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç
    const fullHTML = createFullHTMLDocument(lessonData, printContent);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –¥–ª—è –ø–µ—á–∞—Ç–∏
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      // –ï—Å–ª–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —Å–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∫ HTML —Ñ–∞–π–ª
      downloadAsHTMLFile(fullHTML, lessonData.topic);
      return;
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º HTML –≤ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    printWindow.document.write(fullHTML);
    printWindow.document.close();
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—á–∞—Ç–∏
    printWindow.onload = function() {
      setTimeout(() => {
        printWindow.print();
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ—Å–ª–µ –ø–µ—á–∞—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        // printWindow.close();
      }, 500);
    };
    
  } catch (error) {
    console.error('üìÑ PDF Export: Error during export:', error);
    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ PDF: ' + error.message);
  }
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç HTML —Ñ–∞–π–ª –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
 */
function downloadAsHTMLFile(htmlContent, topicName) {
  const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `–ø–ª–∞–Ω-—É—Ä–æ–∫–∞-${topicName || '–±–µ–∑-–Ω–∞–∑–≤–∞–Ω–∏—è'}.html`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
  
  alert('HTML —Ñ–∞–π–ª –ø–ª–∞–Ω–∞ —É—Ä–æ–∫–∞ —Å–∫–∞—á–∞–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+P –¥–ª—è –ø–µ—á–∞—Ç–∏ –≤ PDF.');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
 */
function createFullHTMLDocument(lessonData, printContent) {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>–ü–ª–∞–Ω —É—Ä–æ–∫–∞ - ${lessonData.topic || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</title>
      <style>
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          text-align: center;
          border-bottom: 2px solid #333;
          padding-bottom: 20px;
          margin-bottom: 30px;
        }
        .lesson-info {
          background: #f8f9fa;
          padding: 15px;
          border-radius: 8px;
          margin-bottom: 20px;
        }
        .goals-section, .description-section {
          margin-top: 12px;
          padding-top: 12px;
          border-top: 1px solid #e5e7eb;
        }
        .lesson-stage {
          margin-bottom: 20px;
          border-left: 3px solid #2563eb;
          background: #f9fafb;
        }
        .stage-header {
          background: #2563eb;
          color: white;
          padding: 8px 15px;
          font-weight: bold;
          font-size: 14px;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        .stage-time {
          font-size: 12px;
          opacity: 0.9;
        }
        .stage-cards {
          padding: 0;
        }
        .info-grid {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 15px;
          margin-top: 15px;
        }
        .info-item {
          display: flex;
          flex-direction: column;
        }
        .info-label {
          font-weight: bold;
          color: #374151;
          margin-bottom: 5px;
        }
        .info-value {
          color: #6b7280;
        }
        .techniques-section {
          margin-top: 30px;
        }
        .technique {
          padding: 12px 15px;
          margin: 0;
          background: white;
          border-bottom: 1px solid #e5e7eb;
        }
        .technique:last-child {
          border-bottom: none;
        }
        .technique-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 6px;
        }
        .technique-title {
          font-size: 14px;
          font-weight: 600;
          color: #1f2937;
          margin: 0;
        }
        .technique-time {
          color: #6b7280;
          font-size: 12px;
          background: #f3f4f6;
          padding: 2px 6px;
          border-radius: 4px;
        }
        .technique-description {
          color: #4b5563;
          margin: 4px 0;
          font-size: 13px;
          line-height: 1.4;
        }
        .technique-content {
          background: #f9fafb;
          padding: 8px;
          border-radius: 4px;
          margin-top: 6px;
          font-size: 12px;
          line-height: 1.3;
        }
        .technique-meta {
          display: flex;
          flex-wrap: wrap;
          gap: 8px;
          margin-top: 10px;
        }
        .meta-tag {
          background: #e5e7eb;
          color: #374151;
          padding: 4px 8px;
          border-radius: 12px;
          font-size: 12px;
        }
        .meta-tag.stage {
          background: #dbeafe;
          color: #1e40af;
        }
        .meta-tag.type {
          background: #d1fae5;
          color: #065f46;
        }
        .meta-tag.skill {
          background: #fef3c7;
          color: #92400e;
        }
        .summary {
          background: #f0f9ff;
          border: 1px solid #0ea5e9;
          padding: 12px;
          border-radius: 6px;
          margin-top: 20px;
        }
        .summary-grid {
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          gap: 15px;
        }
        .summary-item {
          text-align: center;
        }
        .summary-label {
          display: block;
          font-size: 11px;
          color: #6b7280;
          margin-bottom: 2px;
        }
        .summary-value {
          font-weight: bold;
          color: #0369a1;
          font-size: 14px;
        }
        @media print {
          body { margin: 0; padding: 10px; font-size: 12px; }
          .lesson-stage { break-inside: avoid; }
          .technique { break-inside: avoid; }
          .header { margin-bottom: 15px; }
          .lesson-info { margin-bottom: 15px; padding: 10px; }
        }
      </style>
    </head>
    <body>
      ${printContent}
    </body>
    </html>
  `;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏
 */
function createPrintableContent(lessonData) {
  const { subject, topic, grade, description, goals, lessonStages, totalTime } = lessonData;
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –≤—Ä–µ–º—è
  let totalCards = 0;
  let calculatedTotalTime = 0;
  
  if (lessonStages) {
    Object.values(lessonStages).forEach(stage => {
      if (stage.cards) {
        totalCards += stage.cards.length;
        calculatedTotalTime += stage.totalTime || 0;
      }
    });
  }
  
  const finalTotalTime = totalTime || calculatedTotalTime;
  
  return `
    <div class="header">
      <h1>–ü–ª–∞–Ω —É—Ä–æ–∫–∞</h1>
      <p style="margin: 0; color: #6b7280;">–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã EvrikaEdu</p>
    </div>

    <div class="lesson-info">
      <div class="info-grid">
        <div class="info-item">
          <span class="info-label">–ü—Ä–µ–¥–º–µ—Ç:</span>
          <span class="info-value">${subject || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
        </div>
        <div class="info-item">
          <span class="info-label">–ö–ª–∞—Å—Å:</span>
          <span class="info-value">${grade || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
        </div>
        <div class="info-item">
          <span class="info-label">–¢–µ–º–∞ —É—Ä–æ–∫–∞:</span>
          <span class="info-value">${topic || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
        </div>
        <div class="info-item">
          <span class="info-label">–û–±—â–µ–µ –≤—Ä–µ–º—è:</span>
          <span class="info-value">${finalTotalTime} –º–∏–Ω</span>
        </div>
      </div>
      
      ${goals ? `
        <div class="goals-section">
          <span class="info-label">–¶–µ–ª–∏ —É—Ä–æ–∫–∞:</span>
          <div class="info-value">${goals.replace(/\n/g, '<br>')}</div>
        </div>
      ` : ''}
      
      ${description ? `
        <div class="description-section">
          <span class="info-label">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
          <div class="info-value">${description.replace(/\n/g, '<br>')}</div>
        </div>
      ` : ''}
    </div>

    ${lessonStages ? createLessonStagesHTML(lessonStages) : ''}
    
    ${totalCards > 0 ? `
      <div class="summary">
        <div class="summary-grid">
          <div class="summary-item">
            <span class="summary-label">–ü—Ä–∏—ë–º–æ–≤:</span>
            <span class="summary-value">${totalCards}</span>
          </div>
          <div class="summary-item">
            <span class="summary-label">–í—Ä–µ–º—è:</span>
            <span class="summary-value">${finalTotalTime} –º–∏–Ω</span>
          </div>
          <div class="summary-item">
            <span class="summary-label">–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
            <span class="summary-value">${Math.round(finalTotalTime / totalCards)} –º–∏–Ω</span>
          </div>
        </div>
      </div>
    ` : ''}
  `;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è —ç—Ç–∞–ø–æ–≤ —É—Ä–æ–∫–∞
 */
function createLessonStagesHTML(lessonStages) {
  const stageNames = {
    '–Ω–∞—á–∞–ª–æ-—É—Ä–æ–∫–∞': '–ù–∞—á–∞–ª–æ —É—Ä–æ–∫–∞',
    '–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ-–Ω–æ–≤–æ–≥–æ-–º–∞—Ç–µ—Ä–∏–∞–ª–∞': '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞', 
    '–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ': '–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ',
    '–∫–æ–Ω–µ—Ü-—É—Ä–æ–∫–∞': '–ö–æ–Ω–µ—Ü —É—Ä–æ–∫–∞'
  };
  
  let html = '';
  
  Object.entries(lessonStages).forEach(([stageKey, stageData]) => {
    if (stageData.cards && stageData.cards.length > 0) {
      const stageName = stageNames[stageKey] || stageKey;
      const stageTime = stageData.totalTime || 0;
      
      html += `
        <div class="lesson-stage">
          <div class="stage-header">
            <span>${stageName}</span>
            <span class="stage-time">${stageTime} –º–∏–Ω</span>
          </div>
          <div class="stage-cards">
            ${stageData.cards.map((card, index) => createCompactTechniqueHTML(card, index + 1)).join('')}
          </div>
        </div>
      `;
    }
  });
  
  return html;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —ç—Ç–∞–ø–µ —É—Ä–æ–∫–∞
 */
function createCompactTechniqueHTML(card, index) {
  try {
    const timeMinutes = card.timeMinutes || card.time_minutes || 0;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const stagesText = (card.stageIds && Array.isArray(card.stageIds)) ? getStageNames(card.stageIds) : '';
    const typesText = (card.typeIds && Array.isArray(card.typeIds)) ? getTypeNames(card.typeIds) : '';
    const skillsText = (card.skillIds && Array.isArray(card.skillIds)) ? getSkillNames(card.skillIds) : '';
    
    let ageGroupsText = '';
    if (card.ageGroups) {
      if (Array.isArray(card.ageGroups)) {
        ageGroupsText = getAgeGroupNames(card.ageGroups);
      } else if (typeof card.ageGroups === 'string') {
        ageGroupsText = card.ageGroups;
      }
    }

    return `
      <div class="technique">
        <div class="technique-header">
          <h4 class="technique-title">${card.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
          <span class="technique-time">${formatTimeDisplay(timeMinutes)}</span>
        </div>
        
        ${card.description ? `
          <p class="technique-description">${card.description}</p>
        ` : ''}
        
        ${card.content ? `
          <div class="technique-content">
            ${card.content.replace(/\n/g, '<br>')}
          </div>
        ` : ''}

        ${(ageGroupsText || stagesText || typesText || skillsText) ? `
          <div class="technique-meta">
            ${ageGroupsText ? `<span class="meta-tag age-group">${ageGroupsText}</span>` : ''}
            ${stagesText ? `<span class="meta-tag stage">${stagesText}</span>` : ''}
            ${typesText ? `<span class="meta-tag type">${typesText}</span>` : ''}
            ${skillsText ? `<span class="meta-tag skill">${skillsText}</span>` : ''}
          </div>
        ` : ''}
      </div>
    `;
    
  } catch (error) {
    console.error(`üìÑ PDF Export: Error processing card ${index}:`, error);
    return `<div class="technique"><p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ${index}: ${error.message}</p></div>`;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞
 */
function createTechniqueHTML(card, index) {
  try {
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const timeMinutes = card.timeMinutes || card.time_minutes || 0;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å—Ç—Ä–æ–∫–∏)
    const stagesText = (card.stageIds && Array.isArray(card.stageIds)) ? getStageNames(card.stageIds) : '';
    const typesText = (card.typeIds && Array.isArray(card.typeIds)) ? getTypeNames(card.typeIds) : '';
    const skillsText = (card.skillIds && Array.isArray(card.skillIds)) ? getSkillNames(card.skillIds) : '';
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ageGroups - getAgeGroupNames –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –Ω–µ –º–∞—Å—Å–∏–≤
    let ageGroupsText = '';
    if (card.ageGroups) {
      if (Array.isArray(card.ageGroups)) {
        // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ ID, –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        ageGroupsText = getAgeGroupNames(card.ageGroups);
      } else if (typeof card.ageGroups === 'string') {
        // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        ageGroupsText = card.ageGroups;
      }
    }

    return `
      <div class="technique">
        <div class="technique-header">
          <h3 class="technique-title">${index}. ${card.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
          <span class="technique-time">${formatTimeDisplay(timeMinutes)}</span>
        </div>
        
        <p class="technique-description">${card.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
        
        ${card.content ? `
          <div class="technique-content">
            <strong>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</strong><br>
            ${card.content.replace(/\n/g, '<br>')}
          </div>
        ` : ''}

        <div class="technique-meta">
          ${ageGroupsText ? `<span class="meta-tag age-group">${ageGroupsText}</span>` : ''}
          ${stagesText ? `<span class="meta-tag stage">${stagesText}</span>` : ''}
          ${typesText ? `<span class="meta-tag type">${typesText}</span>` : ''}
          ${skillsText ? `<span class="meta-tag skill">${skillsText}</span>` : ''}
        </div>
      </div>
    `;
    
  } catch (error) {
    console.error(`üìÑ PDF Export: Error processing card ${index}:`, error);
    return `<div class="technique"><p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ${index}: ${error.message}</p></div>`;
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —É—Ä–æ–∫–∞ –≤ JSON —Ñ–∞–π–ª
 */
export function exportLessonToJSON(lessonData) {
  const dataStr = JSON.stringify(lessonData, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(dataBlob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `—É—Ä–æ–∫_${lessonData.topic || '–±–µ–∑_–Ω–∞–∑–≤–∞–Ω–∏—è'}_${new Date().toISOString().split('T')[0]}.json`;
  link.click();
  
  URL.revokeObjectURL(url);
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —É—Ä–æ–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
 */
export function exportLessonToText(lessonData) {
  const { subject, topic, grade, description, cards, totalTime } = lessonData;
  
  let content = `–ü–õ–ê–ù –£–†–û–ö–ê\n`;
  content += `${'='.repeat(50)}\n\n`;
  
  content += `–ü—Ä–µ–¥–º–µ—Ç: ${subject || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
  content += `–ö–ª–∞—Å—Å: ${grade || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
  content += `–¢–µ–º–∞: ${topic || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
  content += `–û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime} –º–∏–Ω—É—Ç\n`;
  
  if (description) {
    content += `\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n`;
  }
  
  if (cards && cards.length > 0) {
    content += `\n–ü–†–ò–Å–ú–´ –£–†–û–ö–ê (${cards.length})\n`;
    content += `${'-'.repeat(30)}\n\n`;
    
    cards.forEach((card, index) => {
      content += `${index + 1}. ${card.title}\n`;
      content += `   –í—Ä–µ–º—è: ${formatTimeDisplay(card.timeMinutes)}\n`;
      content += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${card.description}\n`;
      
      if (card.content) {
        content += `   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${card.content}\n`;
      }
      
      const stages = card.stageIds ? getStageNames(card.stageIds) : [];
      const types = card.typeIds ? getTypeNames(card.typeIds) : [];
      const skills = card.skills ? getSkillNames(card.skills) : [];
      
      if (stages.length > 0) {
        content += `   –≠—Ç–∞–ø—ã: ${stages.join(', ')}\n`;
      }
      if (types.length > 0) {
        content += `   –¢–∏–ø—ã —Ä–∞–±–æ—Ç—ã: ${types.join(', ')}\n`;
      }
      if (skills.length > 0) {
        content += `   –ù–∞–≤—ã–∫–∏: ${skills.join(', ')}\n`;
      }
      
      content += '\n';
    });
    
    content += `\n–°–í–û–î–ö–ê\n`;
    content += `${'-'.repeat(20)}\n`;
    content += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤: ${cards.length}\n`;
    content += `–û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime} –º–∏–Ω—É—Ç\n`;
    content += `–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(totalTime / cards.length)} –º–∏–Ω—É—Ç\n`;
  }
  
  const dataBlob = new Blob([content], { type: 'text/plain; charset=utf-8' });
  const url = URL.createObjectURL(dataBlob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `—É—Ä–æ–∫_${lessonData.topic || '–±–µ–∑_–Ω–∞–∑–≤–∞–Ω–∏—è'}_${new Date().toISOString().split('T')[0]}.txt`;
  link.click();
  
  URL.revokeObjectURL(url);
}

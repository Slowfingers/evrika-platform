const { Client } = require('pg');

class DatabaseService {
  constructor() {
    this.db = null;
    this.dbType = 'PostgreSQL';
  }

  async initialize() {
    console.log(`üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${this.dbType}`);
    
    if (!process.env.DATABASE_URL) {
      throw new Error('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è PostgreSQL/Neon –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
    }
    
    return this.initializePostgreSQL();
  }

  async initializePostgreSQL() {
    this.db = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });

    try {
      await this.db.connect();
      console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      await this.createTables();
      await this.seedData();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error.message);
      throw error;
    }
  }

  async createTables() {
    const tables = [
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      `CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        name TEXT NOT NULL,
        password_hash TEXT NOT NULL,
        role TEXT DEFAULT 'user',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,
      
      // –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–µ–º–æ–≤
      `CREATE TABLE IF NOT EXISTS cards (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        content TEXT NOT NULL,
        time_minutes INTEGER DEFAULT 5,
        file_url TEXT,
        views INTEGER DEFAULT 0,
        age_groups TEXT DEFAULT '[]',
        skills TEXT DEFAULT '[]',
        stages TEXT DEFAULT '[]',
        types TEXT DEFAULT '[]',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      `CREATE TABLE IF NOT EXISTS age_groups (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT
      )`,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - –Ω–∞–≤—ã–∫–∏
      `CREATE TABLE IF NOT EXISTS skills (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT
      )`
    ];

    // PostgreSQL - –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ client
    for (const sql of tables) {
      try {
        await this.db.query(sql);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã PostgreSQL:', error.message);
        throw error;
      }
    }
    
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü—ã ${this.dbType} —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
  }

  async seedData() {
    // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ 
    const bcrypt = require('bcryptjs');
    // –ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å: —Å–º–µ—Å—å –±—É–∫–≤, —Ü–∏—Ñ—Ä, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –¥–ª–∏–Ω–∞ 16 —Å–∏–º–≤–æ–ª–æ–≤
    const adminPassword = bcrypt.hashSync('Evr1ka@Adm!n2024', 12);
    
    await this.seedDataPostgreSQL(adminPassword);
  }

  async seedDataPostgreSQL(adminPassword) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞
      await this.db.query(
        `INSERT INTO users (email, name, password_hash, role) 
         VALUES ($1, $2, $3, $4) ON CONFLICT (email) DO NOTHING`,
        ['admin@evrika.com', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', adminPassword, 'admin']
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      const ageGroups = [
        { id: 'primary', name: '–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã (1-4)', description: '–£—á–∞—â–∏–µ—Å—è 1-4 –∫–ª–∞—Å—Å–æ–≤' },
        { id: 'secondary', name: '–°—Ç–∞—Ä—à–∏–µ –∫–ª–∞—Å—Å—ã (5-11)', description: '–£—á–∞—â–∏–µ—Å—è 5-11 –∫–ª–∞—Å—Å–æ–≤' }
      ];

      for (const group of ageGroups) {
        await this.db.query(
          `INSERT INTO age_groups (id, name, description) VALUES ($1, $2, $3) ON CONFLICT (id) DO NOTHING`,
          [group.id, group.name, group.description]
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - –Ω–∞–≤—ã–∫–∏
      const skills = [
        { id: 'critical', name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', description: '–†–∞–∑–≤–∏—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è' },
        { id: 'teamwork', name: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞', description: '–ù–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ' },
        { id: 'reflection', name: '–†–µ—Ñ–ª–µ–∫—Å–∏—è', description: '–ù–∞–≤—ã–∫–∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏' },
        { id: 'creative', name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', description: '–†–∞–∑–≤–∏—Ç–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π' },
        { id: 'systematization', name: '–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞', description: '–ù–∞–≤—ã–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' },
        { id: 'communication', name: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ', description: '–†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤' }
      ];

      for (const skill of skills) {
        await this.db.query(
          `INSERT INTO skills (id, name, description) VALUES ($1, $2, $3) ON CONFLICT (id) DO NOTHING`,
          [skill.id, skill.name, skill.description]
        );
      }

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö PostgreSQL:', error.message);
      throw error;
    }
  }



  async seedDataPostgreSQL(adminPassword) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞
      await this.db.query(
        `INSERT INTO users (email, name, password_hash, role) 
         VALUES ($1, $2, $3, $4) ON CONFLICT (email) DO NOTHING`,
        ['admin@evrika.com', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', adminPassword, 'admin']
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      const ageGroups = [
        { id: 'primary', name: '–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã (1-4)', description: '–£—á–∞—â–∏–µ—Å—è 1-4 –∫–ª–∞—Å—Å–æ–≤' },
        { id: 'secondary', name: '–°—Ç–∞—Ä—à–∏–µ –∫–ª–∞—Å—Å—ã (5-11)', description: '–£—á–∞—â–∏–µ—Å—è 5-11 –∫–ª–∞—Å—Å–æ–≤' }
      ];

      for (const group of ageGroups) {
        await this.db.query(
          `INSERT INTO age_groups (id, name, description) VALUES ($1, $2, $3) ON CONFLICT (id) DO NOTHING`,
          [group.id, group.name, group.description]
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - –Ω–∞–≤—ã–∫–∏
      const skills = [
        { id: 'critical', name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', description: '–†–∞–∑–≤–∏—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è' },
        { id: 'teamwork', name: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞', description: '–ù–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ' },
        { id: 'reflection', name: '–†–µ—Ñ–ª–µ–∫—Å–∏—è', description: '–ù–∞–≤—ã–∫–∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏' },
        { id: 'creative', name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', description: '–†–∞–∑–≤–∏—Ç–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π' },
        { id: 'systematization', name: '–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞', description: '–ù–∞–≤—ã–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' },
        { id: 'communication', name: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ', description: '–†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤' }
      ];

      for (const skill of skills) {
        await this.db.query(
          `INSERT INTO skills (id, name, description) VALUES ($1, $2, $3) ON CONFLICT (id) DO NOTHING`,
          [skill.id, skill.name, skill.description]
        );
      }

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö PostgreSQL:', error.message);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (PostgreSQL —Ç–æ–ª—å–∫–æ)
  async execute(sql, params = []) {
    const result = await this.db.query(sql, params);
    return result.rows;
  }

  async get(sql, params = []) {
    const result = await this.db.query(sql, params);
    return result.rows[0] || null;
  }

  async run(sql, params = []) {
    const result = await this.db.query(sql, params);
    return { changes: result.rowCount, lastInsertRowid: result.rows[0]?.id };
  }

  async insert(sql, params = []) {
    // –î–ª—è PostgreSQL –¥–æ–±–∞–≤–ª—è–µ–º RETURNING id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!sql.toLowerCase().includes('returning')) {
      sql += ' RETURNING id';
    }
    const result = await this.db.query(sql, params);
    return result.rows[0]?.id;
  }

  async update(sql, params = []) {
    const result = await this.run(sql, params);
    return result.changes;
  }

  async transaction(callback) {
    try {
      await this.db.query('BEGIN');
      const result = await callback();
      await this.db.query('COMMIT');
      return result;
    } catch (error) {
      await this.db.query('ROLLBACK');
      throw error;
    }
  }

  getDb() {
    return this.db;
  }

  async close() {
    if (this.db) {
      try {
        await this.db.end();
        console.log('‚úÖ PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è PostgreSQL:', error.message);
      }
    }
  }
}

module.exports = new DatabaseService();
